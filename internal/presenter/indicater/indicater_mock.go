// Code generated by MockGen. DO NOT EDIT.
// Source: ./indicater_interface.go
//
// Generated by this command:
//
//	mockgen -package=indicater -source=./indicater_interface.go -destination=./indicater_mock.go
//

// Package indicater is a generated GoMock package.
package indicater

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIndicater is a mock of Indicater interface.
type MockIndicater struct {
	ctrl     *gomock.Controller
	recorder *MockIndicaterMockRecorder
	isgomock struct{}
}

// MockIndicaterMockRecorder is the mock recorder for MockIndicater.
type MockIndicaterMockRecorder struct {
	mock *MockIndicater
}

// NewMockIndicater creates a new mock instance.
func NewMockIndicater(ctrl *gomock.Controller) *MockIndicater {
	mock := &MockIndicater{ctrl: ctrl}
	mock.recorder = &MockIndicaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndicater) EXPECT() *MockIndicaterMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockIndicater) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockIndicaterMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIndicater)(nil).Start))
}

// Stop mocks base method.
func (m *MockIndicater) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockIndicaterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIndicater)(nil).Stop))
}
