// Code generated by MockGen. DO NOT EDIT.
// Source: ./refac_printer_interface.go
//
// Generated by this command:
//
//	mockgen -package=presenter -source=./refac_printer_interface.go -destination=./refac_printer_mock.go
//

// Package presenter is a generated GoMock package.
package presenter

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRefacPrinter is a mock of RefacPrinter interface.
type MockRefacPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockRefacPrinterMockRecorder
	isgomock struct{}
}

// MockRefacPrinterMockRecorder is the mock recorder for MockRefacPrinter.
type MockRefacPrinterMockRecorder struct {
	mock *MockRefacPrinter
}

// NewMockRefacPrinter creates a new mock instance.
func NewMockRefacPrinter(ctrl *gomock.Controller) *MockRefacPrinter {
	mock := &MockRefacPrinter{ctrl: ctrl}
	mock.recorder = &MockRefacPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefacPrinter) EXPECT() *MockRefacPrinterMockRecorder {
	return m.recorder
}

// Print mocks base method.
func (m *MockRefacPrinter) Print(text ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range text {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Print", varargs...)
}

// Print indicates an expected call of Print.
func (mr *MockRefacPrinterMockRecorder) Print(text ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockRefacPrinter)(nil).Print), text...)
}
