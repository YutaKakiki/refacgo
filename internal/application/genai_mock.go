// Code generated by MockGen. DO NOT EDIT.
// Source: ./genai_interface.go
//
// Generated by this command:
//
//	mockgen -package=application -source=./genai_interface.go -destination=./genai_mock.go
//

// Package application is a generated GoMock package.
package application

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGenAI is a mock of GenAI interface.
type MockGenAI struct {
	ctrl     *gomock.Controller
	recorder *MockGenAIMockRecorder
	isgomock struct{}
}

// MockGenAIMockRecorder is the mock recorder for MockGenAI.
type MockGenAIMockRecorder struct {
	mock *MockGenAI
}

// NewMockGenAI creates a new mock instance.
func NewMockGenAI(ctrl *gomock.Controller) *MockGenAI {
	mock := &MockGenAI{ctrl: ctrl}
	mock.recorder = &MockGenAIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenAI) EXPECT() *MockGenAIMockRecorder {
	return m.recorder
}

// StreamQueryResults mocks base method.
func (m *MockGenAI) StreamQueryResults(ctx context.Context, src []byte, prompt string, ch chan<- string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamQueryResults", ctx, src, prompt, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamQueryResults indicates an expected call of StreamQueryResults.
func (mr *MockGenAIMockRecorder) StreamQueryResults(ctx, src, prompt, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamQueryResults", reflect.TypeOf((*MockGenAI)(nil).StreamQueryResults), ctx, src, prompt, ch)
}
