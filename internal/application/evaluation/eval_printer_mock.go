// Code generated by MockGen. DO NOT EDIT.
// Source: ./eval_printer_interface.go
//
// Generated by this command:
//
//	mockgen -package=evaluation -source=./eval_printer_interface.go -destination=./eval_printer_mock.go
//

// Package evaluation is a generated GoMock package.
package evaluation

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEvalPrinter is a mock of EvalPrinter interface.
type MockEvalPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockEvalPrinterMockRecorder
	isgomock struct{}
}

// MockEvalPrinterMockRecorder is the mock recorder for MockEvalPrinter.
type MockEvalPrinterMockRecorder struct {
	mock *MockEvalPrinter
}

// NewMockEvalPrinter creates a new mock instance.
func NewMockEvalPrinter(ctrl *gomock.Controller) *MockEvalPrinter {
	mock := &MockEvalPrinter{ctrl: ctrl}
	mock.recorder = &MockEvalPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvalPrinter) EXPECT() *MockEvalPrinterMockRecorder {
	return m.recorder
}

// Print mocks base method.
func (m *MockEvalPrinter) Print(ctx context.Context, ch <-chan string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Print", ctx, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Print indicates an expected call of Print.
func (mr *MockEvalPrinterMockRecorder) Print(ctx, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockEvalPrinter)(nil).Print), ctx, ch)
}
