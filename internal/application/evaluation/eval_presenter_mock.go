// Code generated by MockGen. DO NOT EDIT.
// Source: ./eval_presenter_interface.go
//
// Generated by this command:
//
//	mockgen -source=./eval_presenter_interface.go -destination=./eval_presenter_mock.go
//

// Package mock_evaluation is a generated GoMock package.
package evaluation

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEvalPresenter is a mock of EvalPresenter interface.
type MockEvalPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockEvalPresenterMockRecorder
	isgomock struct{}
}

// MockEvalPresenterMockRecorder is the mock recorder for MockEvalPresenter.
type MockEvalPresenterMockRecorder struct {
	mock *MockEvalPresenter
}

// NewMockEvalPresenter creates a new mock instance.
func NewMockEvalPresenter(ctrl *gomock.Controller) *MockEvalPresenter {
	mock := &MockEvalPresenter{ctrl: ctrl}
	mock.recorder = &MockEvalPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvalPresenter) EXPECT() *MockEvalPresenterMockRecorder {
	return m.recorder
}

// EvalPrint mocks base method.
func (m *MockEvalPresenter) EvalPrint(ctx context.Context, ch <-chan string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalPrint", ctx, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvalPrint indicates an expected call of EvalPrint.
func (mr *MockEvalPresenterMockRecorder) EvalPrint(ctx, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalPrint", reflect.TypeOf((*MockEvalPresenter)(nil).EvalPrint), ctx, ch)
}
